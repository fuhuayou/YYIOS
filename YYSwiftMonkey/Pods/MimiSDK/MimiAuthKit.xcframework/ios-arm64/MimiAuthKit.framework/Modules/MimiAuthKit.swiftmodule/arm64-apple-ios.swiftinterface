// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MimiAuthKit
import AVFoundation
import Foundation
@_exported import MimiAuthKit
import MimiCoreKit
import MimiUXKit
import SafariServices
import Swift
import UIKit
import _Concurrency
@_inheritsConvenienceInitializers final public class MimiEmailClientSelectionBulletin : MimiUXKit.MimiBulletinItem {
  public enum Client : Swift.String, Swift.CaseIterable {
    case system
    case gmail
    case outlook
    case spark
    public init?(rawValue: Swift.String)
    public typealias AllCases = [MimiAuthKit.MimiEmailClientSelectionBulletin.Client]
    public typealias RawValue = Swift.String
    public static var allCases: [MimiAuthKit.MimiEmailClientSelectionBulletin.Client] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  weak final public var delegate: MimiAuthKit.MimiEmailClientSelectionBulletinDelegate?
  override final public func didLoad()
  override final public func makeViews(maker: MimiUXKit.MimiBulletinViewMaker) -> [UIKit.UIView]
  override public init()
  @objc deinit
}
public protocol MimiEmailClientSelectionBulletinDelegate : AnyObject {
  func emailClientSelectionBulletin(_ bulletin: MimiAuthKit.MimiEmailClientSelectionBulletin, didOpenUrlFor client: MimiAuthKit.MimiEmailClientSelectionBulletin.Client)
}
extension MimiAuthKit.MimiEmailClientSelectionBulletin.Client {
  public var localizedValue: Swift.String {
    get
  }
  public var tintColor: UIKit.UIColor {
    get
  }
  public var url: Foundation.URL? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class MimiAuthFlow : MimiUXKit.MimiUserFlow {
  public enum Route : Swift.String, Swift.CaseIterable {
    case login
    case signUp
    case resetPassword
    case deviceAuthorization
    public init?(rawValue: Swift.String)
    public typealias AllCases = [MimiAuthKit.MimiAuthFlow.Route]
    public typealias RawValue = Swift.String
    public static var allCases: [MimiAuthKit.MimiAuthFlow.Route] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  override final public var navigationBarClass: UIKit.UINavigationBar.Type? {
    get
  }
  override final public func willAppear(animated: Swift.Bool)
  override final public func didDismiss(animated: Swift.Bool)
  override final public func interactionController(for animationController: UIKit.UIViewControllerAnimatedTransitioning, in navigationController: UIKit.UINavigationController) -> UIKit.UIViewControllerInteractiveTransitioning?
  final public func autoFill(for user: MimiCoreKit.MimiUser)
  @objc deinit
}
extension MimiAuthKit.MimiAuthFlow {
  final public class func build(route: MimiAuthKit.MimiAuthFlow.Route) throws -> MimiAuthKit.MimiAuthFlow
}
extension MimiAuthKit.MimiEmailClientSelectionBulletin.Client : Swift.Equatable {}
extension MimiAuthKit.MimiEmailClientSelectionBulletin.Client : Swift.Hashable {}
extension MimiAuthKit.MimiEmailClientSelectionBulletin.Client : Swift.RawRepresentable {}
extension MimiAuthKit.MimiAuthFlow.Route : Swift.Equatable {}
extension MimiAuthKit.MimiAuthFlow.Route : Swift.Hashable {}
extension MimiAuthKit.MimiAuthFlow.Route : Swift.RawRepresentable {}
