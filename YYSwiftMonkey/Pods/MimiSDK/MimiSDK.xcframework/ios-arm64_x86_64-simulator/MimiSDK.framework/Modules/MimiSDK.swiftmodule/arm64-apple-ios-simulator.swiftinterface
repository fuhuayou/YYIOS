// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MimiSDK
import Combine
import Foundation
import MimiAuthKit
import MimiCoreKit
@_exported import MimiSDK
import MimiTestKit
import MimiUXKit
import Swift
import SwiftUI
import UIKit
import _Concurrency
import simd
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MimiProfileNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var childForStatusBarHidden: UIKit.UIViewController? {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var childForStatusBarStyle: UIKit.UIViewController? {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var childForHomeIndicatorAutoHidden: UIKit.UIViewController? {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) public init(configuration: MimiSDK.MimiProfileConfiguration = .default)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct MimiProfileConfiguration : Swift.Equatable {
  public let allowsRemoteDeviceAuthorization: Swift.Bool
  public init(allowsRemoteDeviceAuthorization: Swift.Bool)
  public static func == (a: MimiSDK.MimiProfileConfiguration, b: MimiSDK.MimiProfileConfiguration) -> Swift.Bool
}
extension MimiSDK.MimiProfileConfiguration {
  public static var `default`: MimiSDK.MimiProfileConfiguration {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class MimiProcessingToggle : MimiUXKit.MimiView {
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var tintColor: UIKit.UIColor! {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) override final public func construct(in view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Mimi {
  final public class func start(credentials: MimiCoreKit.MimiCore.ClientCredentials, delegate: MimiCoreKit.MimiCoreDelegate)
  @objc deinit
}
extension MimiSDK.Mimi {
  public static var version: Swift.String {
    get
  }
  final public class var logLevels: [MimiCoreKit.MimiLogger.Level] {
    get
    set
  }
  public static var core: MimiCoreKit.MimiCore {
    get
  }
  final public class var allowsUsageDataCollection: Swift.Bool {
    get
    set
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MimiProfileViewController : UIKit.UIViewController, MimiUXKit.MimiThemeable {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) public init(configuration: MimiSDK.MimiProfileConfiguration = .default)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toParent parent: UIKit.UIViewController?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) public func apply(theme: MimiUXKit.MimiThemeDefinition)
  @objc deinit
}
extension MimiSDK.MimiProfileViewController : MimiCoreKit.MimiAuthControllerObservable {
  @_Concurrency.MainActor(unsafe) public func authController(_ controller: MimiCoreKit.MimiAuthController, didUpdate currentUser: MimiCoreKit.MimiUser?, from oldUser: MimiCoreKit.MimiUser?, error: MimiCoreKit.MimiCoreError?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MimiProfileLauncherView : MimiUXKit.MimiView {
  @_Concurrency.MainActor(unsafe) public var isHighlighted: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) public init(configuration: MimiSDK.MimiProfileConfiguration = .default)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public func construct(in view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class MimiProcessingIntensitySlider : MimiUXKit.MimiView {
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc override final public var tintColor: UIKit.UIColor! {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) override final public func construct(in view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) override final public func apply(theme: MimiUXKit.MimiThemeDefinition)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
